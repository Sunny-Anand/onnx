// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: onnx/onnx-data.proto

#include "onnx/onnx-data.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace onnx {

inline constexpr MapProto::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        keys_{},
        string_keys_{},
        name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        values_{nullptr},
        key_type_{0} {}

template <typename>
PROTOBUF_CONSTEXPR MapProto::MapProto(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct MapProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MapProtoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MapProtoDefaultTypeInternal() {}
  union {
    MapProto _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MapProtoDefaultTypeInternal _MapProto_default_instance_;

inline constexpr OptionalProto::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        tensor_value_{nullptr},
        sparse_tensor_value_{nullptr},
        sequence_value_{nullptr},
        map_value_{nullptr},
        optional_value_{nullptr},
        elem_type_{0} {}

template <typename>
PROTOBUF_CONSTEXPR OptionalProto::OptionalProto(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct OptionalProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OptionalProtoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~OptionalProtoDefaultTypeInternal() {}
  union {
    OptionalProto _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OptionalProtoDefaultTypeInternal _OptionalProto_default_instance_;

inline constexpr SequenceProto::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        tensor_values_{},
        sparse_tensor_values_{},
        sequence_values_{},
        map_values_{},
        optional_values_{},
        name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        elem_type_{0} {}

template <typename>
PROTOBUF_CONSTEXPR SequenceProto::SequenceProto(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct SequenceProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SequenceProtoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SequenceProtoDefaultTypeInternal() {}
  union {
    SequenceProto _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SequenceProtoDefaultTypeInternal _SequenceProto_default_instance_;
}  // namespace onnx
static ::_pb::Metadata file_level_metadata_onnx_2fonnx_2ddata_2eproto[3];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_onnx_2fonnx_2ddata_2eproto[2];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_onnx_2fonnx_2ddata_2eproto = nullptr;
const ::uint32_t TableStruct_onnx_2fonnx_2ddata_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::onnx::SequenceProto, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::onnx::SequenceProto, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::onnx::SequenceProto, _impl_.name_),
    PROTOBUF_FIELD_OFFSET(::onnx::SequenceProto, _impl_.elem_type_),
    PROTOBUF_FIELD_OFFSET(::onnx::SequenceProto, _impl_.tensor_values_),
    PROTOBUF_FIELD_OFFSET(::onnx::SequenceProto, _impl_.sparse_tensor_values_),
    PROTOBUF_FIELD_OFFSET(::onnx::SequenceProto, _impl_.sequence_values_),
    PROTOBUF_FIELD_OFFSET(::onnx::SequenceProto, _impl_.map_values_),
    PROTOBUF_FIELD_OFFSET(::onnx::SequenceProto, _impl_.optional_values_),
    0,
    1,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::onnx::MapProto, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::onnx::MapProto, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::onnx::MapProto, _impl_.name_),
    PROTOBUF_FIELD_OFFSET(::onnx::MapProto, _impl_.key_type_),
    PROTOBUF_FIELD_OFFSET(::onnx::MapProto, _impl_.keys_),
    PROTOBUF_FIELD_OFFSET(::onnx::MapProto, _impl_.string_keys_),
    PROTOBUF_FIELD_OFFSET(::onnx::MapProto, _impl_.values_),
    0,
    2,
    ~0u,
    ~0u,
    1,
    PROTOBUF_FIELD_OFFSET(::onnx::OptionalProto, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::onnx::OptionalProto, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::onnx::OptionalProto, _impl_.name_),
    PROTOBUF_FIELD_OFFSET(::onnx::OptionalProto, _impl_.elem_type_),
    PROTOBUF_FIELD_OFFSET(::onnx::OptionalProto, _impl_.tensor_value_),
    PROTOBUF_FIELD_OFFSET(::onnx::OptionalProto, _impl_.sparse_tensor_value_),
    PROTOBUF_FIELD_OFFSET(::onnx::OptionalProto, _impl_.sequence_value_),
    PROTOBUF_FIELD_OFFSET(::onnx::OptionalProto, _impl_.map_value_),
    PROTOBUF_FIELD_OFFSET(::onnx::OptionalProto, _impl_.optional_value_),
    0,
    6,
    1,
    2,
    3,
    4,
    5,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        {0, 15, -1, sizeof(::onnx::SequenceProto)},
        {22, 35, -1, sizeof(::onnx::MapProto)},
        {40, 55, -1, sizeof(::onnx::OptionalProto)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::onnx::_SequenceProto_default_instance_._instance,
    &::onnx::_MapProto_default_instance_._instance,
    &::onnx::_OptionalProto_default_instance_._instance,
};
const char descriptor_table_protodef_onnx_2fonnx_2ddata_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\024onnx/onnx-data.proto\022\004onnx\032\022onnx/onnx-"
    "ml.proto\"\360\002\n\rSequenceProto\022\014\n\004name\030\001 \001(\t"
    "\022\021\n\telem_type\030\002 \001(\005\022(\n\rtensor_values\030\003 \003"
    "(\0132\021.onnx.TensorProto\0225\n\024sparse_tensor_v"
    "alues\030\004 \003(\0132\027.onnx.SparseTensorProto\022,\n\017"
    "sequence_values\030\005 \003(\0132\023.onnx.SequencePro"
    "to\022\"\n\nmap_values\030\006 \003(\0132\016.onnx.MapProto\022,"
    "\n\017optional_values\030\007 \003(\0132\023.onnx.OptionalP"
    "roto\"]\n\010DataType\022\r\n\tUNDEFINED\020\000\022\n\n\006TENSO"
    "R\020\001\022\021\n\rSPARSE_TENSOR\020\002\022\014\n\010SEQUENCE\020\003\022\007\n\003"
    "MAP\020\004\022\014\n\010OPTIONAL\020\005\"r\n\010MapProto\022\014\n\004name\030"
    "\001 \001(\t\022\020\n\010key_type\030\002 \001(\005\022\014\n\004keys\030\003 \003(\003\022\023\n"
    "\013string_keys\030\004 \003(\014\022#\n\006values\030\005 \001(\0132\023.onn"
    "x.SequenceProto\"\353\002\n\rOptionalProto\022\014\n\004nam"
    "e\030\001 \001(\t\022\021\n\telem_type\030\002 \001(\005\022\'\n\014tensor_val"
    "ue\030\003 \001(\0132\021.onnx.TensorProto\0224\n\023sparse_te"
    "nsor_value\030\004 \001(\0132\027.onnx.SparseTensorProt"
    "o\022+\n\016sequence_value\030\005 \001(\0132\023.onnx.Sequenc"
    "eProto\022!\n\tmap_value\030\006 \001(\0132\016.onnx.MapProt"
    "o\022+\n\016optional_value\030\007 \001(\0132\023.onnx.Optiona"
    "lProto\"]\n\010DataType\022\r\n\tUNDEFINED\020\000\022\n\n\006TEN"
    "SOR\020\001\022\021\n\rSPARSE_TENSOR\020\002\022\014\n\010SEQUENCE\020\003\022\007"
    "\n\003MAP\020\004\022\014\n\010OPTIONAL\020\005"
};
static const ::_pbi::DescriptorTable* const descriptor_table_onnx_2fonnx_2ddata_2eproto_deps[1] =
    {
        &::descriptor_table_onnx_2fonnx_2dml_2eproto,
};
static ::absl::once_flag descriptor_table_onnx_2fonnx_2ddata_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_onnx_2fonnx_2ddata_2eproto = {
    false,
    false,
    901,
    descriptor_table_protodef_onnx_2fonnx_2ddata_2eproto,
    "onnx/onnx-data.proto",
    &descriptor_table_onnx_2fonnx_2ddata_2eproto_once,
    descriptor_table_onnx_2fonnx_2ddata_2eproto_deps,
    1,
    3,
    schemas,
    file_default_instances,
    TableStruct_onnx_2fonnx_2ddata_2eproto::offsets,
    file_level_metadata_onnx_2fonnx_2ddata_2eproto,
    file_level_enum_descriptors_onnx_2fonnx_2ddata_2eproto,
    file_level_service_descriptors_onnx_2fonnx_2ddata_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_onnx_2fonnx_2ddata_2eproto_getter() {
  return &descriptor_table_onnx_2fonnx_2ddata_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_onnx_2fonnx_2ddata_2eproto(&descriptor_table_onnx_2fonnx_2ddata_2eproto);
namespace onnx {
const ::google::protobuf::EnumDescriptor* SequenceProto_DataType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_onnx_2fonnx_2ddata_2eproto);
  return file_level_enum_descriptors_onnx_2fonnx_2ddata_2eproto[0];
}
PROTOBUF_CONSTINIT const uint32_t SequenceProto_DataType_internal_data_[] = {
    393216u, 0u, };
bool SequenceProto_DataType_IsValid(int value) {
  return 0 <= value && value <= 5;
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr SequenceProto_DataType SequenceProto::UNDEFINED;
constexpr SequenceProto_DataType SequenceProto::TENSOR;
constexpr SequenceProto_DataType SequenceProto::SPARSE_TENSOR;
constexpr SequenceProto_DataType SequenceProto::SEQUENCE;
constexpr SequenceProto_DataType SequenceProto::MAP;
constexpr SequenceProto_DataType SequenceProto::OPTIONAL;
constexpr SequenceProto_DataType SequenceProto::DataType_MIN;
constexpr SequenceProto_DataType SequenceProto::DataType_MAX;
constexpr int SequenceProto::DataType_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::google::protobuf::EnumDescriptor* OptionalProto_DataType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_onnx_2fonnx_2ddata_2eproto);
  return file_level_enum_descriptors_onnx_2fonnx_2ddata_2eproto[1];
}
PROTOBUF_CONSTINIT const uint32_t OptionalProto_DataType_internal_data_[] = {
    393216u, 0u, };
bool OptionalProto_DataType_IsValid(int value) {
  return 0 <= value && value <= 5;
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr OptionalProto_DataType OptionalProto::UNDEFINED;
constexpr OptionalProto_DataType OptionalProto::TENSOR;
constexpr OptionalProto_DataType OptionalProto::SPARSE_TENSOR;
constexpr OptionalProto_DataType OptionalProto::SEQUENCE;
constexpr OptionalProto_DataType OptionalProto::MAP;
constexpr OptionalProto_DataType OptionalProto::OPTIONAL;
constexpr OptionalProto_DataType OptionalProto::DataType_MIN;
constexpr OptionalProto_DataType OptionalProto::DataType_MAX;
constexpr int OptionalProto::DataType_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
// ===================================================================

class SequenceProto::_Internal {
 public:
  using HasBits = decltype(std::declval<SequenceProto>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(SequenceProto, _impl_._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_elem_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

void SequenceProto::clear_tensor_values() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.tensor_values_.Clear();
}
void SequenceProto::clear_sparse_tensor_values() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.sparse_tensor_values_.Clear();
}
SequenceProto::SequenceProto(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:onnx.SequenceProto)
}
inline PROTOBUF_NDEBUG_INLINE SequenceProto::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        tensor_values_{visibility, arena, from.tensor_values_},
        sparse_tensor_values_{visibility, arena, from.sparse_tensor_values_},
        sequence_values_{visibility, arena, from.sequence_values_},
        map_values_{visibility, arena, from.map_values_},
        optional_values_{visibility, arena, from.optional_values_},
        name_(arena, from.name_) {}

SequenceProto::SequenceProto(
    ::google::protobuf::Arena* arena,
    const SequenceProto& from)
    : ::google::protobuf::Message(arena) {
  SequenceProto* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  _impl_.elem_type_ = from._impl_.elem_type_;

  // @@protoc_insertion_point(copy_constructor:onnx.SequenceProto)
}
inline PROTOBUF_NDEBUG_INLINE SequenceProto::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        tensor_values_{visibility, arena},
        sparse_tensor_values_{visibility, arena},
        sequence_values_{visibility, arena},
        map_values_{visibility, arena},
        optional_values_{visibility, arena},
        name_(arena) {}

inline void SequenceProto::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.elem_type_ = {};
}
SequenceProto::~SequenceProto() {
  // @@protoc_insertion_point(destructor:onnx.SequenceProto)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void SequenceProto::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.name_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void SequenceProto::Clear() {
// @@protoc_insertion_point(message_clear_start:onnx.SequenceProto)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.tensor_values_.Clear();
  _impl_.sparse_tensor_values_.Clear();
  _impl_.sequence_values_.Clear();
  _impl_.map_values_.Clear();
  _impl_.optional_values_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.name_.ClearNonDefaultToEmpty();
  }
  _impl_.elem_type_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* SequenceProto::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 7, 5, 31, 2> SequenceProto::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(SequenceProto, _impl_._has_bits_),
    0, // no _extensions_
    7, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967168,  // skipmap
    offsetof(decltype(_table_), field_entries),
    7,  // num_field_entries
    5,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_SequenceProto_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional string name = 1;
    {::_pbi::TcParser::FastSS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(SequenceProto, _impl_.name_)}},
    // optional int32 elem_type = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(SequenceProto, _impl_.elem_type_), 1>(),
     {16, 1, 0, PROTOBUF_FIELD_OFFSET(SequenceProto, _impl_.elem_type_)}},
    // repeated .onnx.TensorProto tensor_values = 3;
    {::_pbi::TcParser::FastMtR1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(SequenceProto, _impl_.tensor_values_)}},
    // repeated .onnx.SparseTensorProto sparse_tensor_values = 4;
    {::_pbi::TcParser::FastMtR1,
     {34, 63, 1, PROTOBUF_FIELD_OFFSET(SequenceProto, _impl_.sparse_tensor_values_)}},
    // repeated .onnx.SequenceProto sequence_values = 5;
    {::_pbi::TcParser::FastMtR1,
     {42, 63, 2, PROTOBUF_FIELD_OFFSET(SequenceProto, _impl_.sequence_values_)}},
    // repeated .onnx.MapProto map_values = 6;
    {::_pbi::TcParser::FastMtR1,
     {50, 63, 3, PROTOBUF_FIELD_OFFSET(SequenceProto, _impl_.map_values_)}},
    // repeated .onnx.OptionalProto optional_values = 7;
    {::_pbi::TcParser::FastMtR1,
     {58, 63, 4, PROTOBUF_FIELD_OFFSET(SequenceProto, _impl_.optional_values_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional string name = 1;
    {PROTOBUF_FIELD_OFFSET(SequenceProto, _impl_.name_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
    // optional int32 elem_type = 2;
    {PROTOBUF_FIELD_OFFSET(SequenceProto, _impl_.elem_type_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // repeated .onnx.TensorProto tensor_values = 3;
    {PROTOBUF_FIELD_OFFSET(SequenceProto, _impl_.tensor_values_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .onnx.SparseTensorProto sparse_tensor_values = 4;
    {PROTOBUF_FIELD_OFFSET(SequenceProto, _impl_.sparse_tensor_values_), -1, 1,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .onnx.SequenceProto sequence_values = 5;
    {PROTOBUF_FIELD_OFFSET(SequenceProto, _impl_.sequence_values_), -1, 2,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .onnx.MapProto map_values = 6;
    {PROTOBUF_FIELD_OFFSET(SequenceProto, _impl_.map_values_), -1, 3,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .onnx.OptionalProto optional_values = 7;
    {PROTOBUF_FIELD_OFFSET(SequenceProto, _impl_.optional_values_), -1, 4,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::onnx::TensorProto>()},
    {::_pbi::TcParser::GetTable<::onnx::SparseTensorProto>()},
    {::_pbi::TcParser::GetTable<::onnx::SequenceProto>()},
    {::_pbi::TcParser::GetTable<::onnx::MapProto>()},
    {::_pbi::TcParser::GetTable<::onnx::OptionalProto>()},
  }}, {{
    "\22\4\0\0\0\0\0\0"
    "onnx.SequenceProto"
    "name"
  }},
};

::uint8_t* SequenceProto::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:onnx.SequenceProto)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_name();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "onnx.SequenceProto.name");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // optional int32 elem_type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<2>(
            stream, this->_internal_elem_type(), target);
  }

  // repeated .onnx.TensorProto tensor_values = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_tensor_values_size()); i < n; i++) {
    const auto& repfield = this->_internal_tensor_values().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .onnx.SparseTensorProto sparse_tensor_values = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_sparse_tensor_values_size()); i < n; i++) {
    const auto& repfield = this->_internal_sparse_tensor_values().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .onnx.SequenceProto sequence_values = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_sequence_values_size()); i < n; i++) {
    const auto& repfield = this->_internal_sequence_values().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .onnx.MapProto map_values = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_map_values_size()); i < n; i++) {
    const auto& repfield = this->_internal_map_values().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .onnx.OptionalProto optional_values = 7;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_optional_values_size()); i < n; i++) {
    const auto& repfield = this->_internal_optional_values().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(7, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onnx.SequenceProto)
  return target;
}

::size_t SequenceProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onnx.SequenceProto)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .onnx.TensorProto tensor_values = 3;
  total_size += 1UL * this->_internal_tensor_values_size();
  for (const auto& msg : this->_internal_tensor_values()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated .onnx.SparseTensorProto sparse_tensor_values = 4;
  total_size += 1UL * this->_internal_sparse_tensor_values_size();
  for (const auto& msg : this->_internal_sparse_tensor_values()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated .onnx.SequenceProto sequence_values = 5;
  total_size += 1UL * this->_internal_sequence_values_size();
  for (const auto& msg : this->_internal_sequence_values()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated .onnx.MapProto map_values = 6;
  total_size += 1UL * this->_internal_map_values_size();
  for (const auto& msg : this->_internal_map_values()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated .onnx.OptionalProto optional_values = 7;
  total_size += 1UL * this->_internal_optional_values_size();
  for (const auto& msg : this->_internal_optional_values()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_name());
    }

    // optional int32 elem_type = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_elem_type());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData SequenceProto::_class_data_ = {
    SequenceProto::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* SequenceProto::GetClassData() const {
  return &_class_data_;
}

void SequenceProto::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<SequenceProto*>(&to_msg);
  auto& from = static_cast<const SequenceProto&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:onnx.SequenceProto)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_tensor_values()->MergeFrom(
      from._internal_tensor_values());
  _this->_internal_mutable_sparse_tensor_values()->MergeFrom(
      from._internal_sparse_tensor_values());
  _this->_internal_mutable_sequence_values()->MergeFrom(
      from._internal_sequence_values());
  _this->_internal_mutable_map_values()->MergeFrom(
      from._internal_map_values());
  _this->_internal_mutable_optional_values()->MergeFrom(
      from._internal_optional_values());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.elem_type_ = from._impl_.elem_type_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SequenceProto::CopyFrom(const SequenceProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onnx.SequenceProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool SequenceProto::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* SequenceProto::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void SequenceProto::InternalSwap(SequenceProto* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.tensor_values_.InternalSwap(&other->_impl_.tensor_values_);
  _impl_.sparse_tensor_values_.InternalSwap(&other->_impl_.sparse_tensor_values_);
  _impl_.sequence_values_.InternalSwap(&other->_impl_.sequence_values_);
  _impl_.map_values_.InternalSwap(&other->_impl_.map_values_);
  _impl_.optional_values_.InternalSwap(&other->_impl_.optional_values_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, &other->_impl_.name_, arena);
        swap(_impl_.elem_type_, other->_impl_.elem_type_);
}

::google::protobuf::Metadata SequenceProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_onnx_2fonnx_2ddata_2eproto_getter, &descriptor_table_onnx_2fonnx_2ddata_2eproto_once,
      file_level_metadata_onnx_2fonnx_2ddata_2eproto[0]);
}
// ===================================================================

class MapProto::_Internal {
 public:
  using HasBits = decltype(std::declval<MapProto>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(MapProto, _impl_._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_key_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::onnx::SequenceProto& values(const MapProto* msg);
  static void set_has_values(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::onnx::SequenceProto& MapProto::_Internal::values(const MapProto* msg) {
  return *msg->_impl_.values_;
}
MapProto::MapProto(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:onnx.MapProto)
}
inline PROTOBUF_NDEBUG_INLINE MapProto::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        keys_{visibility, arena, from.keys_},
        string_keys_{visibility, arena, from.string_keys_},
        name_(arena, from.name_) {}

MapProto::MapProto(
    ::google::protobuf::Arena* arena,
    const MapProto& from)
    : ::google::protobuf::Message(arena) {
  MapProto* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.values_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::onnx::SequenceProto>(arena, *from._impl_.values_)
                : nullptr;
  _impl_.key_type_ = from._impl_.key_type_;

  // @@protoc_insertion_point(copy_constructor:onnx.MapProto)
}
inline PROTOBUF_NDEBUG_INLINE MapProto::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        keys_{visibility, arena},
        string_keys_{visibility, arena},
        name_(arena) {}

inline void MapProto::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, values_),
           0,
           offsetof(Impl_, key_type_) -
               offsetof(Impl_, values_) +
               sizeof(Impl_::key_type_));
}
MapProto::~MapProto() {
  // @@protoc_insertion_point(destructor:onnx.MapProto)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void MapProto::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.name_.Destroy();
  delete _impl_.values_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void MapProto::Clear() {
// @@protoc_insertion_point(message_clear_start:onnx.MapProto)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.keys_.Clear();
  _impl_.string_keys_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.values_ != nullptr);
      _impl_.values_->Clear();
    }
  }
  _impl_.key_type_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* MapProto::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 5, 1, 26, 2> MapProto::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(MapProto, _impl_._has_bits_),
    0, // no _extensions_
    5, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_MapProto_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional string name = 1;
    {::_pbi::TcParser::FastSS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(MapProto, _impl_.name_)}},
    // optional int32 key_type = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(MapProto, _impl_.key_type_), 2>(),
     {16, 2, 0, PROTOBUF_FIELD_OFFSET(MapProto, _impl_.key_type_)}},
    // repeated int64 keys = 3;
    {::_pbi::TcParser::FastV64R1,
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(MapProto, _impl_.keys_)}},
    // repeated bytes string_keys = 4;
    {::_pbi::TcParser::FastBR1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(MapProto, _impl_.string_keys_)}},
    // optional .onnx.SequenceProto values = 5;
    {::_pbi::TcParser::FastMtS1,
     {42, 1, 0, PROTOBUF_FIELD_OFFSET(MapProto, _impl_.values_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // optional string name = 1;
    {PROTOBUF_FIELD_OFFSET(MapProto, _impl_.name_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
    // optional int32 key_type = 2;
    {PROTOBUF_FIELD_OFFSET(MapProto, _impl_.key_type_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // repeated int64 keys = 3;
    {PROTOBUF_FIELD_OFFSET(MapProto, _impl_.keys_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kInt64)},
    // repeated bytes string_keys = 4;
    {PROTOBUF_FIELD_OFFSET(MapProto, _impl_.string_keys_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kBytes | ::_fl::kRepSString)},
    // optional .onnx.SequenceProto values = 5;
    {PROTOBUF_FIELD_OFFSET(MapProto, _impl_.values_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::onnx::SequenceProto>()},
  }}, {{
    "\15\4\0\0\0\0\0\0"
    "onnx.MapProto"
    "name"
  }},
};

::uint8_t* MapProto::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:onnx.MapProto)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_name();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "onnx.MapProto.name");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // optional int32 key_type = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<2>(
            stream, this->_internal_key_type(), target);
  }

  // repeated int64 keys = 3;
  for (int i = 0, n = this->_internal_keys_size(); i < n; ++i) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        3, this->_internal_keys().Get(i), target);
  }

  // repeated bytes string_keys = 4;
  for (int i = 0, n = this->_internal_string_keys_size(); i < n; ++i) {
    const auto& s = this->_internal_string_keys().Get(i);
    target = stream->WriteBytes(4, s, target);
  }

  // optional .onnx.SequenceProto values = 5;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        5, _Internal::values(this),
        _Internal::values(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onnx.MapProto)
  return target;
}

::size_t MapProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onnx.MapProto)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 keys = 3;
  {
    std::size_t data_size = ::_pbi::WireFormatLite::Int64Size(
        this->_internal_keys())
    ;
    std::size_t tag_size = std::size_t{1} *
        ::_pbi::FromIntSize(this->_internal_keys_size());
    ;
    total_size += tag_size + data_size;
  }
  // repeated bytes string_keys = 4;
  total_size += 1 * ::google::protobuf::internal::FromIntSize(_internal_string_keys().size());
  for (int i = 0, n = _internal_string_keys().size(); i < n; ++i) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
        _internal_string_keys().Get(i));
  }
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_name());
    }

    // optional .onnx.SequenceProto values = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.values_);
    }

    // optional int32 key_type = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_key_type());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData MapProto::_class_data_ = {
    MapProto::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* MapProto::GetClassData() const {
  return &_class_data_;
}

void MapProto::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<MapProto*>(&to_msg);
  auto& from = static_cast<const MapProto&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:onnx.MapProto)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_keys()->MergeFrom(from._internal_keys());
  _this->_internal_mutable_string_keys()->MergeFrom(from._internal_string_keys());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_values()->::onnx::SequenceProto::MergeFrom(
          from._internal_values());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.key_type_ = from._impl_.key_type_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void MapProto::CopyFrom(const MapProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onnx.MapProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool MapProto::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* MapProto::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void MapProto::InternalSwap(MapProto* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.keys_.InternalSwap(&other->_impl_.keys_);
  _impl_.string_keys_.InternalSwap(&other->_impl_.string_keys_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, &other->_impl_.name_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MapProto, _impl_.key_type_)
      + sizeof(MapProto::_impl_.key_type_)
      - PROTOBUF_FIELD_OFFSET(MapProto, _impl_.values_)>(
          reinterpret_cast<char*>(&_impl_.values_),
          reinterpret_cast<char*>(&other->_impl_.values_));
}

::google::protobuf::Metadata MapProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_onnx_2fonnx_2ddata_2eproto_getter, &descriptor_table_onnx_2fonnx_2ddata_2eproto_once,
      file_level_metadata_onnx_2fonnx_2ddata_2eproto[1]);
}
// ===================================================================

class OptionalProto::_Internal {
 public:
  using HasBits = decltype(std::declval<OptionalProto>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(OptionalProto, _impl_._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_elem_type(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::onnx::TensorProto& tensor_value(const OptionalProto* msg);
  static void set_has_tensor_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::onnx::SparseTensorProto& sparse_tensor_value(const OptionalProto* msg);
  static void set_has_sparse_tensor_value(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::onnx::SequenceProto& sequence_value(const OptionalProto* msg);
  static void set_has_sequence_value(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::onnx::MapProto& map_value(const OptionalProto* msg);
  static void set_has_map_value(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::onnx::OptionalProto& optional_value(const OptionalProto* msg);
  static void set_has_optional_value(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

const ::onnx::TensorProto& OptionalProto::_Internal::tensor_value(const OptionalProto* msg) {
  return *msg->_impl_.tensor_value_;
}
const ::onnx::SparseTensorProto& OptionalProto::_Internal::sparse_tensor_value(const OptionalProto* msg) {
  return *msg->_impl_.sparse_tensor_value_;
}
const ::onnx::SequenceProto& OptionalProto::_Internal::sequence_value(const OptionalProto* msg) {
  return *msg->_impl_.sequence_value_;
}
const ::onnx::MapProto& OptionalProto::_Internal::map_value(const OptionalProto* msg) {
  return *msg->_impl_.map_value_;
}
const ::onnx::OptionalProto& OptionalProto::_Internal::optional_value(const OptionalProto* msg) {
  return *msg->_impl_.optional_value_;
}
void OptionalProto::clear_tensor_value() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.tensor_value_ != nullptr) _impl_.tensor_value_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void OptionalProto::clear_sparse_tensor_value() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.sparse_tensor_value_ != nullptr) _impl_.sparse_tensor_value_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
OptionalProto::OptionalProto(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:onnx.OptionalProto)
}
inline PROTOBUF_NDEBUG_INLINE OptionalProto::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        name_(arena, from.name_) {}

OptionalProto::OptionalProto(
    ::google::protobuf::Arena* arena,
    const OptionalProto& from)
    : ::google::protobuf::Message(arena) {
  OptionalProto* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.tensor_value_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::onnx::TensorProto>(arena, *from._impl_.tensor_value_)
                : nullptr;
  _impl_.sparse_tensor_value_ = (cached_has_bits & 0x00000004u)
                ? CreateMaybeMessage<::onnx::SparseTensorProto>(arena, *from._impl_.sparse_tensor_value_)
                : nullptr;
  _impl_.sequence_value_ = (cached_has_bits & 0x00000008u)
                ? CreateMaybeMessage<::onnx::SequenceProto>(arena, *from._impl_.sequence_value_)
                : nullptr;
  _impl_.map_value_ = (cached_has_bits & 0x00000010u)
                ? CreateMaybeMessage<::onnx::MapProto>(arena, *from._impl_.map_value_)
                : nullptr;
  _impl_.optional_value_ = (cached_has_bits & 0x00000020u)
                ? CreateMaybeMessage<::onnx::OptionalProto>(arena, *from._impl_.optional_value_)
                : nullptr;
  _impl_.elem_type_ = from._impl_.elem_type_;

  // @@protoc_insertion_point(copy_constructor:onnx.OptionalProto)
}
inline PROTOBUF_NDEBUG_INLINE OptionalProto::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        name_(arena) {}

inline void OptionalProto::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, tensor_value_),
           0,
           offsetof(Impl_, elem_type_) -
               offsetof(Impl_, tensor_value_) +
               sizeof(Impl_::elem_type_));
}
OptionalProto::~OptionalProto() {
  // @@protoc_insertion_point(destructor:onnx.OptionalProto)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void OptionalProto::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.name_.Destroy();
  delete _impl_.tensor_value_;
  delete _impl_.sparse_tensor_value_;
  delete _impl_.sequence_value_;
  delete _impl_.map_value_;
  delete _impl_.optional_value_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void OptionalProto::Clear() {
// @@protoc_insertion_point(message_clear_start:onnx.OptionalProto)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.tensor_value_ != nullptr);
      _impl_.tensor_value_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.sparse_tensor_value_ != nullptr);
      _impl_.sparse_tensor_value_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(_impl_.sequence_value_ != nullptr);
      _impl_.sequence_value_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      ABSL_DCHECK(_impl_.map_value_ != nullptr);
      _impl_.map_value_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      ABSL_DCHECK(_impl_.optional_value_ != nullptr);
      _impl_.optional_value_->Clear();
    }
  }
  _impl_.elem_type_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* OptionalProto::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 7, 5, 31, 2> OptionalProto::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(OptionalProto, _impl_._has_bits_),
    0, // no _extensions_
    7, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967168,  // skipmap
    offsetof(decltype(_table_), field_entries),
    7,  // num_field_entries
    5,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_OptionalProto_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional string name = 1;
    {::_pbi::TcParser::FastSS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(OptionalProto, _impl_.name_)}},
    // optional int32 elem_type = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(OptionalProto, _impl_.elem_type_), 6>(),
     {16, 6, 0, PROTOBUF_FIELD_OFFSET(OptionalProto, _impl_.elem_type_)}},
    // optional .onnx.TensorProto tensor_value = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 1, 0, PROTOBUF_FIELD_OFFSET(OptionalProto, _impl_.tensor_value_)}},
    // optional .onnx.SparseTensorProto sparse_tensor_value = 4;
    {::_pbi::TcParser::FastMtS1,
     {34, 2, 1, PROTOBUF_FIELD_OFFSET(OptionalProto, _impl_.sparse_tensor_value_)}},
    // optional .onnx.SequenceProto sequence_value = 5;
    {::_pbi::TcParser::FastMtS1,
     {42, 3, 2, PROTOBUF_FIELD_OFFSET(OptionalProto, _impl_.sequence_value_)}},
    // optional .onnx.MapProto map_value = 6;
    {::_pbi::TcParser::FastMtS1,
     {50, 4, 3, PROTOBUF_FIELD_OFFSET(OptionalProto, _impl_.map_value_)}},
    // optional .onnx.OptionalProto optional_value = 7;
    {::_pbi::TcParser::FastMtS1,
     {58, 5, 4, PROTOBUF_FIELD_OFFSET(OptionalProto, _impl_.optional_value_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional string name = 1;
    {PROTOBUF_FIELD_OFFSET(OptionalProto, _impl_.name_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
    // optional int32 elem_type = 2;
    {PROTOBUF_FIELD_OFFSET(OptionalProto, _impl_.elem_type_), _Internal::kHasBitsOffset + 6, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional .onnx.TensorProto tensor_value = 3;
    {PROTOBUF_FIELD_OFFSET(OptionalProto, _impl_.tensor_value_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .onnx.SparseTensorProto sparse_tensor_value = 4;
    {PROTOBUF_FIELD_OFFSET(OptionalProto, _impl_.sparse_tensor_value_), _Internal::kHasBitsOffset + 2, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .onnx.SequenceProto sequence_value = 5;
    {PROTOBUF_FIELD_OFFSET(OptionalProto, _impl_.sequence_value_), _Internal::kHasBitsOffset + 3, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .onnx.MapProto map_value = 6;
    {PROTOBUF_FIELD_OFFSET(OptionalProto, _impl_.map_value_), _Internal::kHasBitsOffset + 4, 3,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .onnx.OptionalProto optional_value = 7;
    {PROTOBUF_FIELD_OFFSET(OptionalProto, _impl_.optional_value_), _Internal::kHasBitsOffset + 5, 4,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::onnx::TensorProto>()},
    {::_pbi::TcParser::GetTable<::onnx::SparseTensorProto>()},
    {::_pbi::TcParser::GetTable<::onnx::SequenceProto>()},
    {::_pbi::TcParser::GetTable<::onnx::MapProto>()},
    {::_pbi::TcParser::GetTable<::onnx::OptionalProto>()},
  }}, {{
    "\22\4\0\0\0\0\0\0"
    "onnx.OptionalProto"
    "name"
  }},
};

::uint8_t* OptionalProto::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:onnx.OptionalProto)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_name();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "onnx.OptionalProto.name");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // optional int32 elem_type = 2;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<2>(
            stream, this->_internal_elem_type(), target);
  }

  // optional .onnx.TensorProto tensor_value = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        3, _Internal::tensor_value(this),
        _Internal::tensor_value(this).GetCachedSize(), target, stream);
  }

  // optional .onnx.SparseTensorProto sparse_tensor_value = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        4, _Internal::sparse_tensor_value(this),
        _Internal::sparse_tensor_value(this).GetCachedSize(), target, stream);
  }

  // optional .onnx.SequenceProto sequence_value = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        5, _Internal::sequence_value(this),
        _Internal::sequence_value(this).GetCachedSize(), target, stream);
  }

  // optional .onnx.MapProto map_value = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        6, _Internal::map_value(this),
        _Internal::map_value(this).GetCachedSize(), target, stream);
  }

  // optional .onnx.OptionalProto optional_value = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        7, _Internal::optional_value(this),
        _Internal::optional_value(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onnx.OptionalProto)
  return target;
}

::size_t OptionalProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onnx.OptionalProto)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_name());
    }

    // optional .onnx.TensorProto tensor_value = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.tensor_value_);
    }

    // optional .onnx.SparseTensorProto sparse_tensor_value = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.sparse_tensor_value_);
    }

    // optional .onnx.SequenceProto sequence_value = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.sequence_value_);
    }

    // optional .onnx.MapProto map_value = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.map_value_);
    }

    // optional .onnx.OptionalProto optional_value = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.optional_value_);
    }

    // optional int32 elem_type = 2;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_elem_type());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData OptionalProto::_class_data_ = {
    OptionalProto::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* OptionalProto::GetClassData() const {
  return &_class_data_;
}

void OptionalProto::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<OptionalProto*>(&to_msg);
  auto& from = static_cast<const OptionalProto&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:onnx.OptionalProto)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_tensor_value()->::onnx::TensorProto::MergeFrom(
          from._internal_tensor_value());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_sparse_tensor_value()->::onnx::SparseTensorProto::MergeFrom(
          from._internal_sparse_tensor_value());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_sequence_value()->::onnx::SequenceProto::MergeFrom(
          from._internal_sequence_value());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_map_value()->::onnx::MapProto::MergeFrom(
          from._internal_map_value());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_optional_value()->::onnx::OptionalProto::MergeFrom(
          from._internal_optional_value());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.elem_type_ = from._impl_.elem_type_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void OptionalProto::CopyFrom(const OptionalProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onnx.OptionalProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool OptionalProto::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* OptionalProto::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void OptionalProto::InternalSwap(OptionalProto* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, &other->_impl_.name_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OptionalProto, _impl_.elem_type_)
      + sizeof(OptionalProto::_impl_.elem_type_)
      - PROTOBUF_FIELD_OFFSET(OptionalProto, _impl_.tensor_value_)>(
          reinterpret_cast<char*>(&_impl_.tensor_value_),
          reinterpret_cast<char*>(&other->_impl_.tensor_value_));
}

::google::protobuf::Metadata OptionalProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_onnx_2fonnx_2ddata_2eproto_getter, &descriptor_table_onnx_2fonnx_2ddata_2eproto_once,
      file_level_metadata_onnx_2fonnx_2ddata_2eproto[2]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace onnx
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
